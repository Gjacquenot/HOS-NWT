CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)
PROJECT(HOS-NWT)

SET(CMAKE_VERBOSE_MAKEFILE OFF)
SET(BUILD_SHARED_LIBS ON)

# Define manually these variables to access fftw and lapack libraries
# FFTW_ROOT
# LAPACK_ROOT

################################################################################
SET(CMAKE_MODULE_PATH   ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
SET(SRC_DIRECTORY       ${CMAKE_CURRENT_SOURCE_DIR}/../sources)
SET(BENCHMARK_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../Benchmark)

IF(NOT DEFINED CMAKE_COLOR_MAKEFILE)
    SET(CMAKE_COLOR_MAKEFILE OFF)
ENDIF()

IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(ARCH64_BITS TRUE)
ELSE()
    SET(ARCH64_BITS FALSE)
ENDIF()

IF(NOT DEFINED CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF()

MESSAGE(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
STRING(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_UPPER)
IF(CMAKE_BUILD_TYPE_UPPER MATCHES DEBUG)
    SET(BUILD_SHARED_LIBS OFF)
ENDIF()

IF(${CMAKE_BUILD_TYPE_UPPER} STREQUAL "COVERAGE")
    MESSAGE(STATUS "Adding coverage")
    FIND_PACKAGE(codecov)
ENDIF()

IF(DEFINED INSTALL_PREFIX)
    SET(CMAKE_INSTALL_PREFIX ${INSTALL_PREFIX})
ELSE()
    SET(CMAKE_INSTALL_PREFIX ../install${CMAKE_BUILD_TYPE})
ENDIF()

################################################################################
IF(NOT DEFINED FFTW_USE_STATIC_LIBS)
    SET(FFTW_USE_STATIC_LIBS TRUE)
ENDIF()
FIND_PACKAGE(FFTW REQUIRED)
MESSAGE(STATUS "FFTW_INCLUDES  : ${FFTW_INCLUDES}")
MESSAGE(STATUS "FFTW_LIBRARIES : ${FFTW_LIBRARIES}")
MESSAGE(STATUS "FFTW_LIB       : ${FFTW_LIB}")
MESSAGE(STATUS "FFTWF_LIB      : ${FFTWF_LIB}")
MESSAGE(STATUS "FFTWL_LIB      : ${FFTWL_LIB}")

IF(DEFINED LAPACK_ROOT)
    FIND_PACKAGE(LAPACK REQUIRED
                 HINTS ${LAPACK_ROOT})
ELSE()
    FIND_PACKAGE(LAPACK REQUIRED)
ENDIF()
################################################################################

MESSAGE(STATUS "CMAKE_GENERATOR = ${CMAKE_GENERATOR}")
MESSAGE(STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}")

INCLUDE(CMakeOutputDirectories)

ENABLE_LANGUAGE(Fortran)
INCLUDE(CMakeCompilationOptionsFortran)

################################################################################
INCLUDE(CMakeSources.cmake)
################################################################################

MESSAGE(STATUS "CMAKE_CURRENT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}")
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

ADD_EXECUTABLE(HOS_NWT ${src})
TARGET_LINK_LIBRARIES(HOS_NWT lapack blas ${FFTW_LIBRARIES})

IF(${CMAKE_BUILD_TYPE_UPPER} STREQUAL "COVERAGE")
    add_coverage(HOS_NWT)
ENDIF()

INSTALL(TARGETS HOS_NWT
        RUNTIME DESTINATION ${RUNTIME_OUTPUT_DIRECTORY}
        LIBRARY DESTINATION ${LIBRARY_OUTPUT_DIRECTORY})
SET(ADDITIONAL_LIB)
LIST(APPEND ADDITIONAL_LIB blas lapack)
FOREACH(f ${ADDITIONAL_LIB})
    IF(EXISTS ${f})
        INSTALL(FILES ${f} DESTINATION ${LIBRARY_OUTPUT_DIRECTORY})
    ENDIF()
ENDFOREACH()

ENABLE_TESTING()
MACRO(ADD_A_NEW_BENCHMARK test_name)
    EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E make_directory ${BENCHMARK_DIRECTORY}/${test_name}/Results)
    # SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES TRUE)
    ADD_TEST(NAME ${test_name}
            COMMAND HOS_NWT input_HOS-NWT.dat
            WORKING_DIRECTORY ${BENCHMARK_DIRECTORY}/${test_name})
ENDMACRO()

ADD_A_NEW_BENCHMARK(Irreg_2D)
ADD_A_NEW_BENCHMARK(Irreg_3D)
ADD_A_NEW_BENCHMARK(Regular)
ADD_A_NEW_BENCHMARK(Regular_3D)
ADD_A_NEW_BENCHMARK(Sloshing)

INCLUDE(CMakePack)
